#!/bin/bash

# Function to monitor AWS resources
monitor_resources() {
    echo "Monitoring AWS Resources..."
    
    echo "Listing EC2 Instances..."
    aws ec2 describe-instances > ec2_instances.txt
    
    echo "Listing S3 Buckets..."
    aws s3 ls > s3_buckets.txt
    
    echo "Listing EBS Volumes..."
    aws ec2 describe-volumes > ebs_volumes.txt
    
    echo "Listing Snapshots..."
    aws ec2 describe-snapshots --owner-ids self > snapshots.txt
    
    echo "Collecting Cost and Usage..."
    aws ce get-cost-and-usage --time-period Start=$(date +%Y-%m-01),End=$(date +%Y-%m-%d) \
        --granularity MONTHLY --metrics "UnblendedCost" > cost_usage.txt
    
    echo "Monitoring completed. Data saved in respective text files."
}

# Function to create a new VPC
create_vpc() {
    echo "Creating a new VPC..."
    aws ec2 create-vpc --cidr-block 10.0.0.0/16 > create_vpc_output.txt
    echo "VPC created. Details saved in create_vpc_output.txt."
}

# Function to create a new S3 bucket
create_s3_bucket() {
    if [ -z "$1" ]; then
        echo "Please provide a bucket name."
        return 1
    fi
    echo "Creating S3 Bucket: $1"
    aws s3 mb s3://"$1" > create_s3_bucket_output.txt
    echo "S3 Bucket created. Details saved in create_s3_bucket_output.txt."
}

# Function to create a new EBS volume
create_ebs_volume() {
    echo "Creating a new EBS volume..."
    aws ec2 create-volume --size 100 --region us-west-2 \
        --availability-zone us-west-2a --volume-type gp2 > create_ebs_volume_output.txt
    echo "EBS Volume created. Details saved in create_ebs_volume_output.txt."
}

# Function to perform cost optimization (simple example)
cost_optimization() {
    echo "Performing cost optimization..."
    # Example logic: Identifying underutilized EC2 instances
    aws ec2 describe-instances --query 'Reservations[*].Instances[?CpuOptions.CoreCount<=1].InstanceId' > underutilized_instances.txt
    echo "Cost optimization completed. Underutilized instances listed in underutilized_instances.txt."
}

# Function to generate a report
generate_report() {
    echo "Generating report..."
    
    # Combine all the collected information into a single report file
    cat ec2_instances.txt s3_buckets.txt ebs_volumes.txt snapshots.txt cost_usage.txt > report.txt
    
    # Convert the report to PDF using pandoc
    if command -v pandoc &> /dev/null; then
        pandoc report.txt -o report.pdf
        echo "PDF report generated as report.pdf"
    else
        echo "Pandoc not installed. PDF generation skipped."
    fi
    
    echo "Text report generated as report.txt."
}

# Main function to handle user input and execute the corresponding function
main() {
    case "$1" in
        monitor)
            monitor_resources
            ;;
        create-vpc)
            create_vpc
            ;;
        create-s3-bucket)
            if [ -z "$2" ]; then
                echo "Usage: $0 create-s3-bucket <bucket-name>"
                exit 1
            fi
            create_s3_bucket "$2"
            ;;
        create-ebs-volume)
            create_ebs_volume
            ;;
        cost-optimization)
            cost_optimization
            ;;
        generate-report)
            generate_report
            ;;
        *)
            echo "Usage: $0 {monitor|create-vpc|create-s3-bucket <bucket-name>|create-ebs-volume|cost-optimization|generate-report}"
            exit 1
            ;;
    esac
}

# Execute the main function with command-line arguments
main "$@"


#./aws_management.sh create-vpc
#./aws_management.sh create-s3-bucket my-new-bucket
#./aws_management.sh create-ebs-volume
#./aws_management.sh generate-report

